<?php

declare(strict_types=1);

namespace Darkilliant\MqProcessBundle\Step;

use Darkilliant\MqProcessBundle\Message\Message;
use Darkilliant\MqProcessBundle\Message\Publisher\MessagePublisherFactory;
use Darkilliant\MqProcessBundle\Message\Publisher\MessagePublisherInterface;
use Darkilliant\ProcessBundle\ProcessNotifier\ProgressBarProcessNotifier;
use Darkilliant\ProcessBundle\State\ProcessState;
use Darkilliant\ProcessBundle\Step\AbstractConfigurableStep;
use Darkilliant\ProcessBundle\Step\MonitorableStepInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

class SendMessageStep extends AbstractConfigurableStep implements MonitorableStepInterface
{
    /** @var MessagePublisherFactory */
    private $publisherFactory;

    /** @var ProgressBarProcessNotifier */
    private $notifier;

    private $count;

    private $countMessageReceived = 0;

    public function __construct(MessagePublisherFactory $publisherFactory, ProgressBarProcessNotifier $notifier)
    {
        $this->publisherFactory = $publisherFactory;
        $this->notifier = $notifier;
    }

    public function configureOptionResolver(OptionsResolver $resolver): OptionsResolver
    {
        $resolver->setRequired(['queue', 'exchange', 'client', 'batch_count', 'persistant']);
        $resolver->setDefault('client', 'amqp_lib');
        $resolver->setDefault('persistant', false);
        $resolver->setDefault('batch_count', 1);

        return parent::configureOptionResolver($resolver); // TODO: Change the autogenerated stub
    }

    public function execute(ProcessState $state)
    {
        $this->getPublisher($state)->publish(
            new Message(json_encode($state->getData())),
            $state->getOptions()['batch_count']
        );
    }

    public function count(ProcessState $state)
    {
        if (null === $this->count) {
            $this->count = $this->getPublisher($state)->countMessages();
        }

        return $this->count;
    }

    public function getProgress(ProcessState $state)
    {
        return $this->countMessageReceived = $this->count - $this->getPublisher($state)->countMessages();
    }

    public function finalize(ProcessState $state)
    {
        $this->getPublisher($state)->finalize();

        $this->notifier->onStartIterableProcess($state, $this);
        while ($this->countMessageReceived < $this->count) {
            $this->notifier->onUpdateIterableProcess($state, $this);
            sleep(1);
        }
    }

    private function getPublisherName(ProcessState $state)
    {
        $options = $state->getOptions();

        return $options['exchange'].'_'.$options['queue'];
    }

    private function getPublisher(ProcessState $state): MessagePublisherInterface
    {
        return $this->publisherFactory->factory($this->getPublisherName($state), $state->getOptions());
    }
}
